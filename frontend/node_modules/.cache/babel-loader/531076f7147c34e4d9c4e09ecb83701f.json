{"ast":null,"code":"var _jsxFileName = \"/Users/paradox/Developer/fabrik/react-image-upload/frontend/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker'; // import * as THREE from '../three.js-master/build/three.module.js'\n// import { GLTFLoader } from '../three.js-master/examples/jsm/loaders/GLTFLoader';\n\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nvar canvas = document.querySelector('.webgl');\nvar scene = new THREE.Scene();\nvar loader = new GLTFLoader();\nloader.load('http://localhost:8000/media/post_images/P18.glb', function (glb) {\n  console.log(glb);\n  var root = glb.scene;\n  scene.add(root);\n}, function (xhr) {\n  console.log(xhr.loaded / xhr.total * 100 + \"% loaded\");\n}, function (error) {\n  console.log(\"An error occured\");\n});\nvar light = new THREE.DirectionalLight(0xffffff, 1);\nlight.position.set(2, 2, 5);\nscene.add(light); // Boilerplate canvas code\n\nvar sizes = {\n  width: window.width,\n  height: window.height\n};\nvar camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100);\ncamera.position.set(0, 1, 2);\nscene.add(camera);\nvar renderer = new THREE.WebGL1Renderer({\n  canvas: canvas\n});\nrenderer.setSize(sizes.width, sizes.height);\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.shadowMap.enabled = true;\nrenderer.gammaOutput = true;\n\nfunction animate() {\n  requestAnimationFrame(animate);\n}\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 53\n  },\n  __self: this\n}), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/paradox/Developer/fabrik/react-image-upload/frontend/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","THREE","GLTFLoader","canvas","document","querySelector","scene","Scene","loader","load","glb","console","log","root","add","xhr","loaded","total","error","light","DirectionalLight","position","set","sizes","width","window","height","camera","PerspectiveCamera","renderer","WebGL1Renderer","setSize","setPixelRatio","Math","min","devicePixelRatio","shadowMap","enabled","gammaOutput","animate","requestAnimationFrame","render","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B,C,CACA;AACA;;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAAQC,UAAR,QAAyB,uCAAzB;AAEA,IAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACA,IAAMC,KAAK,GAAG,IAAIL,KAAK,CAACM,KAAV,EAAd;AAEA,IAAMC,MAAM,GAAG,IAAIN,UAAJ,EAAf;AACAM,MAAM,CAACC,IAAP,CAAY,iDAAZ,EAA+D,UAASC,GAAT,EAAa;AACxEC,EAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,MAAMG,IAAI,GAAGH,GAAG,CAACJ,KAAjB;AACAA,EAAAA,KAAK,CAACQ,GAAN,CAAUD,IAAV;AACH,CAJD,EAIG,UAASE,GAAT,EAAa;AACZJ,EAAAA,OAAO,CAACC,GAAR,CAAaG,GAAG,CAACC,MAAJ,GAAWD,GAAG,CAACE,KAAf,GAAuB,GAAxB,GAA+B,UAA3C;AACH,CAND,EAMG,UAASC,KAAT,EAAe;AACdP,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACH,CARD;AAUA,IAAMO,KAAK,GAAG,IAAIlB,KAAK,CAACmB,gBAAV,CAA2B,QAA3B,EAAqC,CAArC,CAAd;AACAD,KAAK,CAACE,QAAN,CAAeC,GAAf,CAAmB,CAAnB,EAAqB,CAArB,EAAuB,CAAvB;AACAhB,KAAK,CAACQ,GAAN,CAAUK,KAAV,E,CAEA;;AACA,IAAMI,KAAK,GAAG;AACVC,EAAAA,KAAK,EAAEC,MAAM,CAACD,KADJ;AAEVE,EAAAA,MAAM,EAAED,MAAM,CAACC;AAFL,CAAd;AAKA,IAAMC,MAAM,GAAG,IAAI1B,KAAK,CAAC2B,iBAAV,CAA4B,EAA5B,EAAgCL,KAAK,CAACC,KAAN,GAAYD,KAAK,CAACG,MAAlD,EAA0D,GAA1D,EAA+D,GAA/D,CAAf;AACAC,MAAM,CAACN,QAAP,CAAgBC,GAAhB,CAAoB,CAApB,EAAsB,CAAtB,EAAwB,CAAxB;AACAhB,KAAK,CAACQ,GAAN,CAAUa,MAAV;AAEA,IAAME,QAAQ,GAAG,IAAI5B,KAAK,CAAC6B,cAAV,CAAyB;AACtC3B,EAAAA,MAAM,EAAEA;AAD8B,CAAzB,CAAjB;AAKA0B,QAAQ,CAACE,OAAT,CAAiBR,KAAK,CAACC,KAAvB,EAA8BD,KAAK,CAACG,MAApC;AACAG,QAAQ,CAACG,aAAT,CAAuBC,IAAI,CAACC,GAAL,CAAST,MAAM,CAACU,gBAAhB,EAAkC,CAAlC,CAAvB;AACAN,QAAQ,CAACO,SAAT,CAAmBC,OAAnB,GAA6B,IAA7B;AACAR,QAAQ,CAACS,WAAT,GAAuB,IAAvB;;AAEA,SAASC,OAAT,GAAkB;AACdC,EAAAA,qBAAqB,CAACD,OAAD,CAArB;AACH;;AAEDzC,QAAQ,CAAC2C,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBrC,QAAQ,CAACsC,cAAT,CAAwB,MAAxB,CAAzB,E,CAEA;AACA;AACA;;AACA1C,aAAa,CAAC2C,UAAd","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import * as THREE from '../three.js-master/build/three.module.js'\n// import { GLTFLoader } from '../three.js-master/examples/jsm/loaders/GLTFLoader';\nimport * as THREE from 'three';\nimport {GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader';\n\nconst canvas = document.querySelector('.webgl')\nconst scene = new THREE.Scene();\n\nconst loader = new GLTFLoader()\nloader.load('http://localhost:8000/media/post_images/P18.glb', function(glb){\n    console.log(glb)\n    const root = glb.scene;\n    scene.add(root);\n}, function(xhr){\n    console.log((xhr.loaded/xhr.total * 100) + \"% loaded\")\n}, function(error){\n    console.log(\"An error occured\")\n})\n\nconst light = new THREE.DirectionalLight(0xffffff, 1)\nlight.position.set(2,2,5)\nscene.add(light)\n\n// Boilerplate canvas code\nconst sizes = {\n    width: window.width,\n    height: window.height\n}\n\nconst camera = new THREE.PerspectiveCamera(75, sizes.width/sizes.height, 0.1, 100)\ncamera.position.set(0,1,2)\nscene.add(camera)\n\nconst renderer = new THREE.WebGL1Renderer({\n    canvas: canvas\n})\n\n\nrenderer.setSize(sizes.width, sizes.height)\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\nrenderer.shadowMap.enabled = true\nrenderer.gammaOutput = true\n\nfunction animate(){\n    requestAnimationFrame(animate)\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}