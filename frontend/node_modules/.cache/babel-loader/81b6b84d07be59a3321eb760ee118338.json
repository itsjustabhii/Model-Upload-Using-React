{"ast":null,"code":"var _jsxFileName = \"/Users/paradox/Developer/fabrik/react-image-upload/frontend/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10\n  },\n  __self: this\n}), document.getElementById('root'));\nvar canvas = document.querySelector('.webgl');\nvar scene = new THREE.Scene();\nvar loader = new GLTFLoader();\nloader.load('http://127.0.0.1:8000/static/post_images/P7.glb', function (glb) {\n  console.log(glb);\n  var root = glb.scene;\n  root.scale.set(0.05, 0.05, 0.05);\n  scene.add(root);\n}, function (xhr) {\n  console.log(xhr.loaded / xhr.total * 100 + \"% loaded\");\n}, function (error) {\n  console.log(\"An error occured\");\n});\nvar light = new THREE.DirectionalLight(0xffffff, 1);\nlight.position.set(2, 2, 5);\nscene.add(light); // Boilerplate canvas code\n// const sizes = {\n//     width: window.width,\n//     height: window.height\n// }\n\nvar camera = new THREE.PerspectiveCamera(75, 800 / 800, 2, 100);\ncamera.position.set(0, 1, 2);\nscene.add(camera);\nvar renderer = new THREE.WebGL1Renderer({\n  canvas: canvas\n});\nrenderer.setSize(800, 800);\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.shadowMap.enabled = true;\nrenderer.outputEncoding = true;\n\nfunction animate() {\n  requestAnimationFrame(animate);\n  renderer.render(scene, camera);\n}\n\nanimate(); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/paradox/Developer/fabrik/react-image-upload/frontend/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","THREE","GLTFLoader","render","document","getElementById","canvas","querySelector","scene","Scene","loader","load","glb","console","log","root","scale","set","add","xhr","loaded","total","error","light","DirectionalLight","position","camera","PerspectiveCamera","renderer","WebGL1Renderer","setSize","setPixelRatio","Math","min","window","devicePixelRatio","shadowMap","enabled","outputEncoding","animate","requestAnimationFrame","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AAEA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAAQC,UAAR,QAAyB,uCAAzB;AAEAJ,QAAQ,CAACK,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB;AAIA,IAAMC,MAAM,GAAGF,QAAQ,CAACG,aAAT,CAAuB,QAAvB,CAAf;AACA,IAAMC,KAAK,GAAG,IAAIP,KAAK,CAACQ,KAAV,EAAd;AAEA,IAAMC,MAAM,GAAG,IAAIR,UAAJ,EAAf;AACAQ,MAAM,CAACC,IAAP,CAAY,iDAAZ,EAA+D,UAASC,GAAT,EAAa;AACxEC,EAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,MAAMG,IAAI,GAAGH,GAAG,CAACJ,KAAjB;AACAO,EAAAA,IAAI,CAACC,KAAL,CAAWC,GAAX,CAAe,IAAf,EAAoB,IAApB,EAAyB,IAAzB;AACAT,EAAAA,KAAK,CAACU,GAAN,CAAUH,IAAV;AACH,CALD,EAKG,UAASI,GAAT,EAAa;AACZN,EAAAA,OAAO,CAACC,GAAR,CAAaK,GAAG,CAACC,MAAJ,GAAWD,GAAG,CAACE,KAAf,GAAuB,GAAxB,GAA+B,UAA3C;AACH,CAPD,EAOG,UAASC,KAAT,EAAe;AACdT,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACH,CATD;AAWA,IAAMS,KAAK,GAAG,IAAItB,KAAK,CAACuB,gBAAV,CAA2B,QAA3B,EAAqC,CAArC,CAAd;AACAD,KAAK,CAACE,QAAN,CAAeR,GAAf,CAAmB,CAAnB,EAAqB,CAArB,EAAuB,CAAvB;AACAT,KAAK,CAACU,GAAN,CAAUK,KAAV,E,CAEA;AACA;AACA;AACA;AACA;;AAEA,IAAMG,MAAM,GAAG,IAAIzB,KAAK,CAAC0B,iBAAV,CAA4B,EAA5B,EAAgC,MAAI,GAApC,EAAyC,CAAzC,EAA4C,GAA5C,CAAf;AACAD,MAAM,CAACD,QAAP,CAAgBR,GAAhB,CAAoB,CAApB,EAAsB,CAAtB,EAAwB,CAAxB;AACAT,KAAK,CAACU,GAAN,CAAUQ,MAAV;AAEA,IAAME,QAAQ,GAAG,IAAI3B,KAAK,CAAC4B,cAAV,CAAyB;AACtCvB,EAAAA,MAAM,EAAEA;AAD8B,CAAzB,CAAjB;AAKAsB,QAAQ,CAACE,OAAT,CAAiB,GAAjB,EAAsB,GAAtB;AACAF,QAAQ,CAACG,aAAT,CAAuBC,IAAI,CAACC,GAAL,CAASC,MAAM,CAACC,gBAAhB,EAAkC,CAAlC,CAAvB;AACAP,QAAQ,CAACQ,SAAT,CAAmBC,OAAnB,GAA6B,IAA7B;AACAT,QAAQ,CAACU,cAAT,GAA0B,IAA1B;;AAEA,SAASC,OAAT,GAAkB;AACdC,EAAAA,qBAAqB,CAACD,OAAD,CAArB;AACAX,EAAAA,QAAQ,CAACzB,MAAT,CAAgBK,KAAhB,EAAuBkB,MAAvB;AAEH;;AAEDa,OAAO,G,CAGP;AACA;AACA;;AACAvC,aAAa,CAACyC,UAAd","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport * as THREE from 'three';\nimport {GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\nconst canvas = document.querySelector('.webgl')\nconst scene = new THREE.Scene();\n\nconst loader = new GLTFLoader()\nloader.load('http://127.0.0.1:8000/static/post_images/P7.glb', function(glb){\n    console.log(glb)\n    const root = glb.scene;\n    root.scale.set(0.05,0.05,0.05)\n    scene.add(root);\n}, function(xhr){\n    console.log((xhr.loaded/xhr.total * 100) + \"% loaded\")\n}, function(error){\n    console.log(\"An error occured\")\n})\n\nconst light = new THREE.DirectionalLight(0xffffff, 1)\nlight.position.set(2,2,5)\nscene.add(light)\n\n// Boilerplate canvas code\n// const sizes = {\n//     width: window.width,\n//     height: window.height\n// }\n\nconst camera = new THREE.PerspectiveCamera(75, 800/800, 2, 100)\ncamera.position.set(0,1,2)\nscene.add(camera)\n\nconst renderer = new THREE.WebGL1Renderer({\n    canvas: canvas\n})\n\n\nrenderer.setSize(800, 800)\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\nrenderer.shadowMap.enabled = true\nrenderer.outputEncoding = true\n\nfunction animate(){\n    requestAnimationFrame(animate)\n    renderer.render(scene, camera)\n\n}\n\nanimate()\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}